{"paragraphs":[{"text":"%md\n#Entrainement du modèle","dateUpdated":"Mar 9, 2016 8:55:38 PM","config":{"colWidth":12,"editorMode":"ace/mode/scala","editorHide":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1457556938250_-420111207","id":"20160309-205538_35510236","dateCreated":"Mar 9, 2016 8:55:38 PM","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:1267"},{"text":"val Array(trainingData, testData) = df.randomSplit(Array(0.7, 0.3),15L)\n\n\n// Train model.  This also runs the indexers.\nval genModel = pipeline.fit(trainingData)\n// Make predictions.\nval predictions = genModel.transform(testData)\npredictions.select(\"Pclass\",\"sex\",\"age\",\"SibSp\",\"embarked\",\"survived\",\"prediction\",\"probability\").registerTempTable(\"testPredictions\")","dateUpdated":"Mar 9, 2016 8:55:38 PM","config":{"colWidth":12,"editorMode":"ace/mode/scala","editorHide":false,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1457556938250_-420111207","id":"20160309-205538_77790882","dateCreated":"Mar 9, 2016 8:55:38 PM","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:1268"},{"text":"%md\nPourquoi séparer en 30 et 70 % ?\n<COMPLETER>","dateUpdated":"Mar 9, 2016 10:20:13 PM","config":{"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":false,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1457556938250_-420111207","id":"20160309-205538_1488389190","dateCreated":"Mar 9, 2016 8:55:38 PM","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:1269"},{"text":"%md\n##Mesurer la performance du modèle\nAvec l'aide de commande sql, estimer : \n- Taux de bonnes predictions (prediction=survived) : <COMPLETER>%\n- Taux de mauvaises predictions (prediction!=survived) : <COMPLETER>%\n- \n- Taux de vrai positifs (prediction= 1 and survived =1) : <COMPLETER>%\n- Taux de faux positifs = indiqué mort mais ayant en fait survécu (prediction= 0 and survived =1) : <COMPLETER>%\n- \n- Taux de vrai négatifs (prediction= 1 and survived =0) : <COMPLETER>%\n- Taux de faux négatifs = indiqué survivant mais ayant en fait non survécu (prediction= 1 and survived =0) : <COMPLETER>%\n- \n\n__Le modèle prédit plus de faux positifs (indiqué mort mais ayant en fait survécu) ou de faux negatifs ( indiqué survivant mais ayant en fait non survécu ) ?__<COMPLETER>","dateUpdated":"Mar 9, 2016 10:20:32 PM","config":{"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":false,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1457556938250_-420111207","id":"20160309-205538_1177152147","dateCreated":"Mar 9, 2016 8:55:38 PM","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:1270"},{"text":"%spark\nsqlContext.sql(\"select count(*) nb_positifs from testPredictions where survived =...\").show()\nsqlContext.sql(\"select .... from testPredictions where survived =1 group by ...\").show()\n\n","dateUpdated":"Mar 9, 2016 10:21:17 PM","config":{"colWidth":12,"editorMode":"ace/mode/scala","graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1457556938251_-420495956","id":"20160309-205538_719742653","dateCreated":"Mar 9, 2016 8:55:38 PM","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:1271"},{"text":"%angular\n<h2>Logistic regression</h2>\n<img src=\"http://mlpy.sourceforge.net/docs/3.5/_images/elasticnetc.png\"/>\n<img src=\"https://codesachin.files.wordpress.com/2015/08/linearly_separable_4.png\"/>\nRouge : Survivant\n<br/>\nBleu : non survivant\n<br/>","authenticationInfo":{},"dateUpdated":"Mar 9, 2016 10:21:11 PM","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala","editorHide":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1457558730718_151399609","id":"20160309-212530_1823784860","result":{"code":"SUCCESS","type":"ANGULAR","msg":"<h2>Logistic regression</h2>\n<img src=\"http://mlpy.sourceforge.net/docs/3.5/_images/elasticnetc.png\"/>\n<img src=\"https://codesachin.files.wordpress.com/2015/08/linearly_separable_4.png\"/>\nRouge : Survivant\n<br/>\nBleu : non survivant\n<br/>"},"dateCreated":"Mar 9, 2016 9:25:30 PM","dateStarted":"Mar 9, 2016 10:21:08 PM","dateFinished":"Mar 9, 2016 10:21:08 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:1272","focus":true},{"text":"%md\nSoit la fonction __f__ \nLa probabilité de survie est de p = exp(__f__)/(1+exp(__f__))\n#\nRappel : si X>0 : 1<exp(X)<+oo \nsi X<0 : 0<exp(X)<1 #\n#\nDonc si __f__>0 => p>0.5 => Survivant\nDonc si __f__<0 => p<0.5 => Non survivant","authenticationInfo":{},"dateUpdated":"Mar 9, 2016 10:21:17 PM","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/markdown","editorHide":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1457560056197_685143212","id":"20160309-214736_719108254","result":{"code":"SUCCESS","type":"HTML","msg":"<p>Soit la fonction <strong>f</strong>\n<br  />La probabilité de survie est de p = exp(<strong>f</strong>)/(1+exp(<strong>f</strong>))</p>\n<h1></h1>\n<p>Rappel : si X>0 : 1<exp(X)<+oo\n<br  />si X&lt;0 : 0&lt;exp(X)&lt;1 #</p>\n<h1></h1>\n<p>Donc si <strong>f</strong>>0 => p>0.5 => Survivant\n<br  />Donc si <strong>f</strong><0 => p<0.5 => Non survivant</p>\n"},"dateCreated":"Mar 9, 2016 9:47:36 PM","dateStarted":"Mar 9, 2016 10:21:17 PM","dateFinished":"Mar 9, 2016 10:21:17 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:1273","focus":true},{"text":"%md\n##Etudier comment a été construit le modèle\nPour rappel features = [\"Pclass\",\"indexedSex\" ,\"age\",\"SibSp\",\"Parch\",\"Fare\",\"indexedEmbarked\"]\n\nA l'aide de weights indiquer la formule de la frontière de prédiction : \nf  = <COMPLETER> * Pclass + <COMPLETER> * indexedSex - <COMPLETER> * age - <COMPLETER> * SibSp - <COMPLETER> *  Parch + <COMPLETER> * Fare - <COMPLETER> * indexedEmbarked\n\npClass  1,2 ou 3  donc Pclass influence f entre <COMPLETER> et <COMPLETER>\nSex : 0 ou 1 donc entre <COMPLETER> et <COMPLETER>\nage : 0 à 100 donc entre <COMPLETER> et <COMPLETER>\nSibsp : \nparch : \nFare etc...\n\n__Les variables avec le plus de significativités : <COMPLETER>__\n","authenticationInfo":{},"dateUpdated":"Mar 9, 2016 10:22:32 PM","config":{"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":false,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1457556938251_-420495956","id":"20160309-205538_966970029","dateCreated":"Mar 9, 2016 8:55:38 PM","dateStarted":"Mar 9, 2016 9:58:19 PM","dateFinished":"Mar 9, 2016 9:58:19 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:1274","errorMessage":""},{"text":"%spark\n\nval logisticRegressionModel = genModel.stages(4).asInstanceOf[org.apache.spark.ml.classification.LogisticRegressionModel] \nprintln(logisticRegressionModel.weights)\n","dateUpdated":"Mar 9, 2016 8:55:38 PM","config":{"colWidth":12,"editorMode":"ace/mode/scala","graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1457556938251_-420495956","id":"20160309-205538_1507294443","dateCreated":"Mar 9, 2016 8:55:38 PM","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:1275"},{"text":"%md\nUtiliser le notebook 4 pour utiliser le modèle....","dateUpdated":"Mar 9, 2016 10:22:30 PM","config":{"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1457556938252_-422419700","id":"20160309-205538_1344501808","result":{"code":"SUCCESS","type":"HTML","msg":"<p>Utiliser le notebook 4 pour utiliser le modèle&hellip;.</p>\n"},"dateCreated":"Mar 9, 2016 8:55:38 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:1276","dateFinished":"Mar 9, 2016 10:22:30 PM","dateStarted":"Mar 9, 2016 10:22:30 PM","focus":true},{"dateUpdated":"Mar 9, 2016 8:55:38 PM","config":{"colWidth":12,"editorMode":"ace/mode/scala","graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1457556938252_-422419700","id":"20160309-205538_1231634183","dateCreated":"Mar 9, 2016 8:55:38 PM","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:1277"}],"name":"03 - Titanic : Entrainer et analyser le modèle","id":"2BE2F2JSK","owners":[],"readers":[],"writers":[],"angularObjects":{"2BDGS26KH":[],"2BFKU3YF6":[],"2BFY4UKAS":[],"2BCYUSJ27":[]},"config":{"looknfeel":"default"},"info":{}}